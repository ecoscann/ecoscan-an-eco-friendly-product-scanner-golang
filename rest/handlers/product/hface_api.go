package product

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"os"
	"time"

	"ecoscan.com/repo"
)

var lowScoreFallbacks = []string{
	"ржмрж╛рж╣, %s ржЦрзЗрж▓рзЗ рж╕рждрзНржпрж┐ржЗ рж░рж┐ржлрзНрж░рзЗрж╢рж┐ржВ рж▓рж╛ржЧрзЗ ЁЯМ▒\nрждржмрзЗ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрзНржпрж╛ржи ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзйрзж%% ржмрж░рзНржЬрзНржп ржХржорж╛ржирзЛ ржпрзЗрждрзЛред",
	"%s ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржоржЬрж╛ ржЖржЫрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржПрж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ ржЯрзЗржХрж╕ржЗ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрж╛ржЪ ржмрж╛ ржХрзНржпрж╛ржи ржмрзЗржЫрзЗ ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзирзл%% рж╕рзЗржн ржХрж░рждрзЗ ржкрж╛рж░рждрзЗржиред",
	"%s ржЦрж╛ржУржпрж╝рж╛ ржжрж╛рж░рзБржг рж▓рж╛ржЧрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрзНрж░ржХрзГрждрж┐рж░ ржХрзНрж╖рждрж┐ ржХрж░рзЗред\nржЖржкржирж┐ ржпржжрж┐ ржмрж┐ржХрж▓рзНржк ржирж┐рждрзЗржи, waste reduction ржжрзНржмрж┐ржЧрзБржг рж╣рждрзЛред",
}

var goodScoreFallbacks = []string{
	"ржЪржорзОржХрж╛рж░! %s ржмрзЗржЫрзЗ ржирж┐ржпрж╝рзЗ ржЖржкржирж┐ ржжрж╛рж░рзБржг ржХрж╛ржЬ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЗ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ рждрзБрж▓ржирж╛ржорзВрж▓ржХржнрж╛ржмрзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржмред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзж%% ржмрж░рзНржЬрзНржп ржХржоржЫрзЗред",
	"%s ржирзЗржУржпрж╝рж╛ржпрж╝ ржЖржкржирж┐ ржкрж░рж┐ржмрзЗрж╢ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржжрж╛ржпрж╝ржХ ржПржХржЯрж┐ рж╕рж┐ржжрзНржзрж╛ржирзНрждред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзйрзл%% waste рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
	"%s ржХрж┐ржирзЗ ржЖржкржирж┐ ржкрзГржерж┐ржмрзАржХрзЗ ржПржХржЯрзБ рж╣рж╛рж▓ржХрж╛ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ sustainable choice, ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзл%% рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
}

func (h *ProductHandler) generateMotivationalMessage(product repo.Product, score int) string {
    apiKey := os.Getenv("OPENROUTER_API_KEY")
    if apiKey == "" {
        return randomScoreAwareFallback(product.Name, score)
    }

    var prompt string
    if score < 60 {
        prompt = fmt.Sprintf(
			"this is an api call"+
		"Context: The user scanned %s by %s. EcoтАСscore: %d (low).\n"+
		"Task: Write exactly 3 lines in Bengali (Banglish style).\n"+
		"- Line 1: Say something nice about the product.\n"+
		"- Line 2: Point out the environmental issue with its packaging (%s).\n"+
		"- Line 3: Encourage the user to check the alternative products list shown in the app, "+
		"and explain they could reduce waste by choosing one of those greener options.\n"+
		"Tone: Respectful 'ржЖржкржирж┐', friendly, motivational, and empowering.\n"+
		"Always end with ЁЯМ▒.\n\n"+
		"Demo (for inspiration, donтАЩt copy exactly): Coconut Cookie ржЦрзЗрждрзЗ ржЕржирзЗржХ ржоржЬрж╛... рждржмрзЗ Plastic Packaging ржЯрж╛ ржЪрж┐ржирзНрждрж╛рж░ ржмрж┐рж╖ржпрж╝ред ржПржмрж╛рж░ greener рж╣рзЛржи, Alternatives ржЧрзБрж▓рзЛ ржЪрзЗржХ ржХрж░рзБржи, better ржЕржкрж╢ржи ржкрзЗрж▓рзЗ ржкрзНрж░рж╛ржпрж╝ 30%% plastic waste ржХржорж╛рждрзЗ ржкрж╛рж░ржмрзЗржиред ржЖрж╕рзБржи рж╕ржмрж╛ржЗ ржорж┐рж▓рзЗ ржкрж░рж┐ржЪрзНржЫржирзНржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ЁЯЗзЁЯЗй ржЧржбрж╝рж┐ред",
		product.Name, product.BrandName, score, product.PackagingMaterial,
)

    } else {
        prompt = fmt.Sprintf(
			"this is an api call"+
            "Context: The user scanned %s by %s. EcoтАСscore: %d (good).\n"+
                "Task: Write exactly 3 lines in Bengali (Banglish style).\n"+
                "- Use respectful 'ржЖржкржирж┐' tone.\n"+
                "- Line 1: Mention the product name(in english) and celebrate its taste/usage.\n"+
                "- Line 2: Praise its ecoтАСfriendly packaging or choice.\n"+
                "- Line 3: Highlight a realistic %% waste saved and encourage continuing.\n"+
                "Always end with ЁЯМ▒.\n\n"+
                "Demo (for inspiration, donтАЩt copy exactly, rewrite in your own way):\n"+
                "ржЪржорзОржХрж╛рж░! Aarong Dairy Chocolate Milk ржПрж░ рж░рж┐ржЪ ржЪржХрж▓рзЗржЯ ржПрж░ ржлрзНрж▓рзЗржнрж╛рж░ ржЕржирзЗржХ ржоржЬрж╛, ржЕржирзЗржХрзЗрж░ ржЗ ржкржЫржирзНржж ржПржЯрж╛ред ржЖрж░ ржПрж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВ ржЕржирзЗржХ sustainable! ржПржЯрж╛ ржХрж┐ржирж▓рзЗ ржЖржкржирж┐ ржкрзНрж░рж╛ржпрж╝ 40%% ржПрж░ ржмрзЗрж╢рж┐ ржЕржкржЪржпрж╝ ржХржорж╛рж▓рзЗржиред ржПржЯрж╛ ржирж┐рж╢рзНржЪрж┐ржирзНрждрзЗ ржХрж┐ржирждрзЗ ржкрж╛рж░рзЗржиред ржПржнрж╛ржмрзЗржЗ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржПрж░ ржкрж░рж┐ржмрзЗрж╢ рж░ржХрзНрж╖рж╛ржпрж╝ ржЖржкржирж╛рж░ ржЕржмржжрж╛ржи рж░рж╛ржЦрзБржиред",
            product.Name, product.BrandName, score,
        )
    }

    messages := []map[string]string{
        {"role": "user", "content": prompt},
    }

    payload := map[string]interface{}{
        "model": "meta-llama/llama-4-maverick:free", 
        "messages": messages,
    }

    bodyBytes, _ := json.Marshal(payload)

    url := "https://openrouter.ai/api/v1/chat/completions"

    req, _ := http.NewRequest("POST", url, bytes.NewBuffer(bodyBytes))
    req.Header.Set("Authorization", "Bearer "+apiKey)
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("HTTP-Referer", "https://yourapp.com")
    req.Header.Set("X-Title", "ecoScanAi")

    client := &http.Client{Timeout: 12 * time.Second}
    resp, err := client.Do(req)
    if err != nil {
        log.Printf("OpenRouter API error: %v", err)
        return randomScoreAwareFallback(product.Name, score)
    }
    defer resp.Body.Close()

    respBody, _ := io.ReadAll(resp.Body)
    log.Printf("OpenRouter status: %d", resp.StatusCode)
    log.Println("OpenRouter raw response:", string(respBody))

    var result struct {
        Choices []struct {
            Message struct {
                Content string `json:"content"`
            } `json:"message"`
        } `json:"choices"`
    }
    if err := json.Unmarshal(respBody, &result); err == nil {
        if len(result.Choices) > 0 && result.Choices[0].Message.Content != "" {
            return result.Choices[0].Message.Content
        }
    }

    return randomScoreAwareFallback(product.Name, score)
}


func randomScoreAwareFallback(productName string, score int) string {
	rand.Seed(time.Now().UnixNano())
	if score < 50 {
		msg := lowScoreFallbacks[rand.Intn(len(lowScoreFallbacks))]
		return fmt.Sprintf(msg, productName)
	}
	msg := goodScoreFallbacks[rand.Intn(len(goodScoreFallbacks))]
	return fmt.Sprintf(msg, productName)
}
