package product

import (
    "bytes"
    "encoding/json"
    "fmt"
    "io"
    "log"
    "net/http"
    "os"

    "ecoscan.com/repo"
)

// generateMotivationalMessage calls OpenRouter (GPTтАС4o) to generate
// a short eco-friendly motivational message in Bengali ЁЯМ▒.
// - If score is low: encourage alternatives, but keep it supportive.
// - If score is good: praise the choice and highlight benefits.
// - Always in natural, inspiring Bengali (not overly formal).
// - Include an eco emoji ЁЯМ▒ in the response.
func (h *ProductHandler) generateMotivationalMessage(product repo.Product, score int) string {
    apiKey := os.Getenv("OPENROUTER_API_KEY")
    if apiKey == "" {
        return "ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржкржгрзНржп ржмрзЗржЫрзЗ ржирзЗржУржпрж╝рж╛ ржЖржорж╛ржжрзЗрж░ ржкрзГржерж┐ржмрзАржХрзЗ рж░ржХрзНрж╖рж╛ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗ ЁЯМ▒"
    }

    var prompt string
    if score < 50 {
        prompt = fmt.Sprintf(
            "ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА %s (%s) ржХрзЗржирж╛рж░ ржХржерж╛ ржнрж╛ржмржЫрзЗржиред ржЗржХрзЛ рж╕рзНржХрзЛрж░: %d (ржХржо)ред "+
                "ржмрж╛ржВрж▓рж╛ржпрж╝ ржПржХржЯрж┐ рж╕ржВржХрзНрж╖рж┐ржкрзНржд, рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржУ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржорзВрж▓ржХ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи (рж╕рж░рзНржмрзЛржЪрзНржЪ рзиржЯрж┐ ржмрж╛ржХрзНржп)ред "+
                "рждрж╛ржжрзЗрж░ржХрзЗ ржЖрж░ржУ ржнрж╛рж▓рзЛ ржкрзНрж░ржнрж╛ржмрзЗрж░ ржЬржирзНржп ржЙржЪрзНржЪрждрж░ ржЗржХрзЛ рж╕рзНржХрзЛрж░рзЗрж░ ржмрж┐ржХрж▓рзНржк ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржЙрзОрж╕рж╛рж╣рж┐ржд ржХрж░рзБржиред "+
                "ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржпрзЗржи ржмржирзНржзрзБрж╕рзБрж▓ржн ржУ ржЗрждрж┐ржмрж╛ржЪржХ рж╣ржпрж╝ред "+
                "ржПржХржЯрж┐ ржмрж╛рж╕рзНрждржмрж╕ржорзНржоржд ржмрж░рзНржЬрзНржп рж╣рзНрж░рж╛рж╕рзЗрж░ рж╢рждрж╛ржВрж╢ ржмрж╛ ржкрж░рж┐ржмрзЗрж╢ржЧржд рж╕рзБржмрж┐ржзрж╛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ржмрж╛рж░ ржнрж┐ржирзНржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи ржпрж╛рждрзЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ рж╕рждрзЗржЬ ржоржирзЗ рж╣ржпрж╝ред "+
                "ржмрж╛рж░рзНрждрж╛ржпрж╝ ржПржХржЯрж┐ ржкрж░рж┐ржмрзЗрж╢ ржЗржорзЛржЬрж┐ ЁЯМ▒ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
            product.Name, product.BrandName, score,
        )
    } else {
        prompt = fmt.Sprintf(
            "ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА %s (%s) ржХрж┐ржиржЫрзЗржиред ржЗржХрзЛ рж╕рзНржХрзЛрж░: %d (ржнрж╛рж▓рзЛ)ред "+
                "ржмрж╛ржВрж▓рж╛ржпрж╝ ржПржХржЯрж┐ рж╕ржВржХрзНрж╖рж┐ржкрзНржд, рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржУ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржорзВрж▓ржХ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи (рж╕рж░рзНржмрзЛржЪрзНржЪ рзиржЯрж┐ ржмрж╛ржХрзНржп)ред "+
                "ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржпрзЗржи ржмрзНржпржХрзНрждрж┐ржЧржд, ржЙрж╖рзНржг ржУ ржЗрждрж┐ржмрж╛ржЪржХ рж╣ржпрж╝ред "+
                "ржПржХржЯрж┐ ржмрж╛рж╕рзНрждржмрж╕ржорзНржоржд ржмрж░рзНржЬрзНржп рж╣рзНрж░рж╛рж╕рзЗрж░ рж╢рждрж╛ржВрж╢ ржмрж╛ ржкрж░рж┐ржмрзЗрж╢ржЧржд рж╕рзБржмрж┐ржзрж╛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ржмрж╛рж░ ржнрж┐ржирзНржиржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржи ржпрж╛рждрзЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ рж╕рждрзЗржЬ ржоржирзЗ рж╣ржпрж╝ред "+
                "ржмрж╛рж░рзНрждрж╛ржпрж╝ ржПржХржЯрж┐ ржкрж░рж┐ржмрзЗрж╢ ржЗржорзЛржЬрж┐ ЁЯМ▒/ЁЯНГ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
            product.Name, product.BrandName, score,
        )
    }

    messages := []map[string]string{
        {"role": "user", "content": prompt},
    }

    payload := map[string]interface{}{
        "model":    "openai/gpt-4o",
        "messages": messages,
    }

    bodyBytes, _ := json.Marshal(payload)

    url := "https://openrouter.ai/api/v1/chat/completions"

    req, _ := http.NewRequest("POST", url, bytes.NewBuffer(bodyBytes))
    req.Header.Set("Authorization", "Bearer "+apiKey)
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("HTTP-Referer", "https://yourapp.com")
    req.Header.Set("X-Title", "ecoScanAi")

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        log.Printf("OpenRouter API error: %v", err)
        return "ржЖржкржирж╛рж░ ржкржЫржирзНржж ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржЬржирзНржп ржЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржнрж╛ржм ржлрзЗрж▓ржЫрзЗ ЁЯМ▒"
    }
    defer resp.Body.Close()

    respBody, _ := io.ReadAll(resp.Body)
    log.Printf("OpenRouter status: %d", resp.StatusCode)
    log.Println("OpenRouter raw response:", string(respBody))

    var result struct {
        Choices []struct {
            Message struct {
                Content string `json:"content"`
            } `json:"message"`
        } `json:"choices"`
    }
    if err := json.Unmarshal(respBody, &result); err == nil {
        if len(result.Choices) > 0 && result.Choices[0].Message.Content != "" {
            return result.Choices[0].Message.Content
        }
    }

    return "ржзржирзНржпржмрж╛ржж ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржкржгрзНржп ржмрзЗржЫрзЗ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп тАФ ржПржХрж╕рж╛ржерзЗ ржЖржорж░рж╛ ржмрж░рзНржЬрзНржп ржХржорж╛рждрзЗ ржкрж╛рж░рж┐ ЁЯМ▒"
}
