package product

import (
    "bytes"
    "encoding/json"
    "fmt"
    "io"
    "log"
    "math/rand"
    "net/http"
    "os"
    "time"

    "ecoscan.com/repo"
)

// Fallback messages for low-score products (3-line, respectful "ржЖржкржирж┐" tone)
var lowScoreFallbacks = []string{
    "ржмрж╛рж╣, %s ржЦрзЗрж▓рзЗ рж╕рждрзНржпрж┐ржЗ рж░рж┐ржлрзНрж░рзЗрж╢рж┐ржВ рж▓рж╛ржЧрзЗ ЁЯМ▒\nрждржмрзЗ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрзНржпрж╛ржи ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзйрзж%% ржмрж░рзНржЬрзНржп ржХржорж╛ржирзЛ ржпрзЗрждрзЛред",
    "%s ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржоржЬрж╛ ржЖржЫрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржПрж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ ржЯрзЗржХрж╕ржЗ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрж╛ржЪ ржмрж╛ ржХрзНржпрж╛ржи ржмрзЗржЫрзЗ ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзирзл%% рж╕рзЗржн ржХрж░рждрзЗ ржкрж╛рж░рждрзЗржиред",
    "%s ржЦрж╛ржУржпрж╝рж╛ ржжрж╛рж░рзБржг рж▓рж╛ржЧрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрзНрж░ржХрзГрждрж┐рж░ ржХрзНрж╖рждрж┐ ржХрж░рзЗред\nржЖржкржирж┐ ржпржжрж┐ ржмрж┐ржХрж▓рзНржк ржирж┐рждрзЗржи, waste reduction ржжрзНржмрж┐ржЧрзБржг рж╣рждрзЛред",
}

// Fallback messages for good-score products (3-line, respectful "ржЖржкржирж┐" tone)
var goodScoreFallbacks = []string{
    "ржЪржорзОржХрж╛рж░! %s ржмрзЗржЫрзЗ ржирж┐ржпрж╝рзЗ ржЖржкржирж┐ ржжрж╛рж░рзБржг ржХрж╛ржЬ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЗ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ рждрзБрж▓ржирж╛ржорзВрж▓ржХржнрж╛ржмрзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржмред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзж%% ржмрж░рзНржЬрзНржп ржХржоржЫрзЗред",
    "%s ржирзЗржУржпрж╝рж╛ржпрж╝ ржЖржкржирж┐ ржкрж░рж┐ржмрзЗрж╢ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржжрж╛ржпрж╝ржХ ржПржХржЯрж┐ рж╕рж┐ржжрзНржзрж╛ржирзНрждред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзйрзл%% waste рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
    "%s ржХрж┐ржирзЗ ржЖржкржирж┐ ржкрзГржерж┐ржмрзАржХрзЗ ржПржХржЯрзБ рж╣рж╛рж▓ржХрж╛ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ sustainable choice, ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзл%% рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
}

// generateMotivationalMessage calls OpenRouter (GPTтАС4o) to generate
// a 3-line eco-friendly motivational message in Bengali ЁЯМ▒.
func (h *ProductHandler) generateMotivationalMessage(product repo.Product, score int) string {
    apiKey := os.Getenv("OPENROUTER_API_KEY")
    if apiKey == "" {
        return randomScoreAwareFallback(product.Name, score)
    }

    var prompt string
    if score < 60 {
        prompt = fmt.Sprintf(
            "User is considering buying %s by %s. Eco Score: %d (low). "+
                "Write a short interesting ecoтАСmotivational message in Bengali, exactly 3 lines. "+
                "- Use respectful 'ржЖржкржирж┐' tone. "+
                "- Line 1: Mention the product name and say something about its usage/experience (e.g., refreshing, tasty, useful). "+
                "- Line 2: Casually point out the %s packaging/environmental issue (e.g., plastic bottle, nonтАСeco packaging). "+
                "- Line 3: Suggest a greener alternative (like can, glass, paper) and mention a realistic percentage of waste saved. and look down for better alternatives with high score"+
                "Keep it natural, light, and positive. Always include an eco emoji ЁЯМ▒.",
            product.Name, product.BrandName, score, product.PackagingMaterial,
        )
    } else {
        prompt = fmt.Sprintf(
            "User is buying %s by %s. Eco Score: %d (good). "+
                "Write a short interesting ecoтАСmotivational message in Bengali, exactly 3 lines"+
                "- Use respectful 'ржЖржкржирж┐' tone. "+
                "- Line 1: Mention the product name and say something about its usage/experience (e.g., refreshing, tasty, useful). "+
                "- Line 2: Celebrate their choice and say something nice about the product/packaging. "+
                "- Line 3: Highlight a realistic percentage of waste saved. "+
                "Vary the style each time тАФ sometimes playful, sometimes poetic, sometimes motivational. "+
                "Always include an eco emoji ЁЯМ▒.",
            product.Name, product.BrandName, score,
        )
    }

    messages := []map[string]string{
        {"role": "user", "content": prompt},
    }

    payload := map[string]interface{}{
        "model":    "openai/gpt-4o",
        "messages": messages,
    }

    bodyBytes, _ := json.Marshal(payload)

    url := "https://openrouter.ai/api/v1/chat/completions"

    req, _ := http.NewRequest("POST", url, bytes.NewBuffer(bodyBytes))
    req.Header.Set("Authorization", "Bearer "+apiKey)
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("HTTP-Referer", "https://yourapp.com")
    req.Header.Set("X-Title", "ecoScanAi")

    client := &http.Client{Timeout: 12 * time.Second}
    resp, err := client.Do(req)
    if err != nil {
        log.Printf("OpenRouter API error: %v", err)
        return randomScoreAwareFallback(product.Name, score)
    }
    defer resp.Body.Close()

    respBody, _ := io.ReadAll(resp.Body)
    log.Printf("OpenRouter status: %d", resp.StatusCode)
    log.Println("OpenRouter raw response:", string(respBody))

    var result struct {
        Choices []struct {
            Message struct {
                Content string `json:"content"`
            } `json:"message"`
        } `json:"choices"`
    }
    if err := json.Unmarshal(respBody, &result); err == nil {
        if len(result.Choices) > 0 && result.Choices[0].Message.Content != "" {
            return result.Choices[0].Message.Content
        }
    }

    return randomScoreAwareFallback(product.Name, score)
}

// randomScoreAwareFallback picks a 3-line fallback message based on eco score
func randomScoreAwareFallback(productName string, score int) string {
    rand.Seed(time.Now().UnixNano())
    if score < 50 {
        msg := lowScoreFallbacks[rand.Intn(len(lowScoreFallbacks))]
        return fmt.Sprintf(msg, productName)
    }
    msg := goodScoreFallbacks[rand.Intn(len(goodScoreFallbacks))]
    return fmt.Sprintf(msg, productName)
}
