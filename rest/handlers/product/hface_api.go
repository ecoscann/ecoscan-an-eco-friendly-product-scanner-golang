package product

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"os"
	"time"

	"ecoscan.com/repo"
)

var lowScoreFallbacks = []string{
	"ржмрж╛рж╣, %s ржЦрзЗрж▓рзЗ рж╕рждрзНржпрж┐ржЗ рж░рж┐ржлрзНрж░рзЗрж╢рж┐ржВ рж▓рж╛ржЧрзЗ ЁЯМ▒\nрждржмрзЗ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрзНржпрж╛ржи ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзйрзж%% ржмрж░рзНржЬрзНржп ржХржорж╛ржирзЛ ржпрзЗрждрзЛред",
	"%s ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржоржЬрж╛ ржЖржЫрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржПрж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ ржЯрзЗржХрж╕ржЗ ржиржпрж╝ред\nржЖржкржирж┐ ржпржжрж┐ ржХрж╛ржЪ ржмрж╛ ржХрзНржпрж╛ржи ржмрзЗржЫрзЗ ржирж┐рждрзЗржи, ржкрзНрж░рж╛ржпрж╝ рзирзл%% рж╕рзЗржн ржХрж░рждрзЗ ржкрж╛рж░рждрзЗржиред",
	"%s ржЦрж╛ржУржпрж╝рж╛ ржжрж╛рж░рзБржг рж▓рж╛ржЧрзЗ ЁЯМ▒\nржХрж┐ржирзНрждрзБ ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржмрзЛрждрж▓ржЯрж╛ ржкрзНрж░ржХрзГрждрж┐рж░ ржХрзНрж╖рждрж┐ ржХрж░рзЗред\nржЖржкржирж┐ ржпржжрж┐ ржмрж┐ржХрж▓рзНржк ржирж┐рждрзЗржи, waste reduction ржжрзНржмрж┐ржЧрзБржг рж╣рждрзЛред",
}

var goodScoreFallbacks = []string{
	"ржЪржорзОржХрж╛рж░! %s ржмрзЗржЫрзЗ ржирж┐ржпрж╝рзЗ ржЖржкржирж┐ ржжрж╛рж░рзБржг ржХрж╛ржЬ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЗ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВржЯрж╛ рждрзБрж▓ржирж╛ржорзВрж▓ржХржнрж╛ржмрзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржмред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзж%% ржмрж░рзНржЬрзНржп ржХржоржЫрзЗред",
	"%s ржирзЗржУржпрж╝рж╛ржпрж╝ ржЖржкржирж┐ ржкрж░рж┐ржмрзЗрж╢ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржжрж╛ржпрж╝ржХ ржПржХржЯрж┐ рж╕рж┐ржжрзНржзрж╛ржирзНрждред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзйрзл%% waste рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
	"%s ржХрж┐ржирзЗ ржЖржкржирж┐ ржкрзГржерж┐ржмрзАржХрзЗ ржПржХржЯрзБ рж╣рж╛рж▓ржХрж╛ ржХрж░рзЗржЫрзЗржи ЁЯМ▒\nржПржЯрж╛ sustainable choice, ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛред\nржПржнрж╛ржмрзЗ ржкрзНрж░рж╛ржпрж╝ рзкрзл%% рж╕рзЗржн рж╣ржЪрзНржЫрзЗред",
}

func (h *ProductHandler) generateMotivationalMessage(product repo.Product, score int) string {
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		return randomScoreAwareFallback(product.Name, score)
	}

	var prompt string
	if score < 60 {
		prompt = fmt.Sprintf(
			"Context: The user is scanning a product (%s by %s) with a low eco-score (%d). "+
				"Task: Write a 3-line, empathetic, and encouraging message in casual Bengali (Banglish style). "+
				"Tone: Respectful 'ржЖржкржирж┐', friendly, light-hearted, and non-judgmental. "+
				"Always end with an eco emoji ЁЯМ▒."+
				"inspire from the demo below and tell/ rewrite in your own way say something about the product first"+
				"demo: Coconut Cookie ржЦрзЗрждрзЗ ржЕржирзЗржХ ржоржЬрж╛ ржПрждрзЗ ржХрзЛржХрзЛржирж╛ржЯ ржПрж░ ржПржХржЯрж╛ ржирзНржпрж╛ржЪрж╛рж░рж╛рж▓ ржлрзНрж▓рзЗржнрж╛рж░ ржЖржЫрзЗ рждржмрзЗ Plastic Packaging ржЯрж╛ ржХрж┐ржирзНрждрзБ ржЪрж┐ржирзНрждрж╛ ржХрж░рж╛рж░ ржмрж┐рж╖ржпрж╝ред ржПржмрж╛рж░ ржХрзЗржирж╛ржХрж╛ржЯрж╛ржпрж╝ ржПржХржЯрзБ greener рж╣рзЛржи, Alternatives ржЧрзБрж▓рзЛ ржЪрзЗржХ ржХрж░рзБржи better ржЕржкрж╢ржи ржкрзЗрж▓рзЗ ржкрзНрж░рж╛ржпрж╝ ржЖржкржирж┐ 30% ,plastic waste ржХржорж╛рждрзЗ ржЖржкржирж╛рж░ ржЕржмржжрж╛ржи рж░рж╛ржЦрждрзЗ ржкрж╛рж░ржмрзЗржиред ржЖрж╕рзБржи рж╕ржмрж╛ржЗ ржорж┐рж▓рзЗ ржПржХржЯрзБ ржкрж░рж┐ржЪрзНржЫржирзНржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ЁЯЗзЁЯЗй ржЧржбрж╝рж┐ред"+
				"the percentage of wastage should be based on real % impact on nature after a person decide not to buy that material product",
			product.Name, product.BrandName, score, product.Name, product.PackagingMaterial, product.PackagingMaterial,
		)
	} else {
		prompt = fmt.Sprintf(
			"Context: The user is scanning a product (%s by %s) with a good eco-score %d "+
				"Task: Write a 3-line, celebratory message in casual Bengali (Banglish style). "+
				"Tone: Respectful 'ржЖржкржирж┐', enthusiastic, positive, and reinforcing. "+
				"demo: ржЪржорзОржХрж╛рж░! Aarong Dairy Chocolate Milk ржПрж░ рж░рж┐ржЪ ржЪржХрж▓рзЗржЯ ржПрж░ ржлрзНрж▓рзЗржнрж╛рж░ ржЕржирзЗржХ ржоржЬрж╛, ржЕржирзЗржХрзЗрж░ ржЗ ржкржЫржирзНржж ржПржЯрж╛ред ржЖрж░ ржПрж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВ ржЕржирзЗржХ sustainable! ржПржЯрж╛ ржХрж┐ржирж▓рзЗ ржЖржкржирж┐ ржкрзНрж░рж╛ржпрж╝ 40% ,ржПрж░ ржмрзЗрж╢рж┐ ржЕржкржЪржпрж╝ ржХржорж╛рж▓рзЗржиред ржПржЯрж╛ ржирж┐рж╢рзНржЪрж┐ржирзНрждрзЗ ржХрж┐ржирждрзЗ ржкрж╛рж░рзЗржиред ржПржнрж╛ржмрзЗржЗ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржПрж░ ржкрж░рж┐ржмрзЗрж╢ рж░ржХрзНрж╖рж╛ржпрж╝ ржЖржкржирж╛рж░ ржЕржмржжрж╛ржи рж░рж╛ржЦрзБржиред"+
				"write in your own way inspire from the demo. rewrite, dont write the same everytime"+
				"the percentage should be based on real or random %, positive impact on nature after a person decide to buy a sustainable product",
			product.Name, product.BrandName, score,
		)
	}

	messages := []map[string]string{
		{"role": "user", "content": prompt},
	}

	payload := map[string]interface{}{
		"model":    "deepseek/deepseek-chat-v3-0324:free",
		"messages": messages,
	}

	bodyBytes, _ := json.Marshal(payload)

	url := "https://openrouter.ai/api/v1/chat/completions"

	req, _ := http.NewRequest("POST", url, bytes.NewBuffer(bodyBytes))
	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("HTTP-Referer", "https://yourapp.com")
	req.Header.Set("X-Title", "ecoScanAi")

	client := &http.Client{Timeout: 12 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("OpenRouter API error: %v", err)
		return randomScoreAwareFallback(product.Name, score)
	}
	defer resp.Body.Close()

	respBody, _ := io.ReadAll(resp.Body)
	log.Printf("OpenRouter status: %d", resp.StatusCode)
	log.Println("OpenRouter raw response:", string(respBody))

	var result struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}
	if err := json.Unmarshal(respBody, &result); err == nil {
		if len(result.Choices) > 0 && result.Choices[0].Message.Content != "" {
			return result.Choices[0].Message.Content
		}
	}

	return randomScoreAwareFallback(product.Name, score)
}

func randomScoreAwareFallback(productName string, score int) string {
	rand.Seed(time.Now().UnixNano())
	if score < 50 {
		msg := lowScoreFallbacks[rand.Intn(len(lowScoreFallbacks))]
		return fmt.Sprintf(msg, productName)
	}
	msg := goodScoreFallbacks[rand.Intn(len(goodScoreFallbacks))]
	return fmt.Sprintf(msg, productName)
}
